name: Build Image

env:
  YEAR: 2025
  IMAGE_NAME: helm-test

on:

  push:
    paths:
      - '20*/helm/**'
      - '20*/argo-cd/**'
  pull_request:
    paths:
      - '20*/helm/**'
      - '20*/argo-cd/**'

jobs:
  prepare:
    name: Prepare Job
    runs-on: ubuntu-latest
    outputs:
      run_helm: ${{ steps.filter.outputs.helm }}
      run_argo: ${{ steps.filter.outputs.argo }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Detect changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            helm:
              - '20*/helm/**'
            argo:
              - '20*/argo-cd/**'
  
  helm-test:
    name: Helm Test
    env:
      HELM_TEST_CLUSTER_NAME: helm-e2e
    needs: prepare
    if: needs.prepare.outputs.run_helm == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare Docker build Context
        id: ctx
        run: |
          echo "context=${{ env.YEAR }}/helm/${{ github.actor }}" >> $GITHUB_OUTPUT
          echo "tag=${{ env.IMAGE_NAME }}:${{ github.actor }}" >> $GITHUB_OUTPUT

      - name: Build Container Image
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:${{ steps.ctx.outputs.context }}"
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          tags: ${{ steps.ctx.outputs.tag }}
          load: true
      
      - name: Create Kind Cluster
        uses: helm/kind-action@v1.12.0
        with:
          cluster_name: helm-e2e
          config: ./.github/00_init/config/kind.yaml

      - name: Image Upload to Kind
        run: |
          kind load docker-image ${{ steps.ctx.outputs.tag }} --name $HELM_TEST_CLUSTER_NAME

      - name: Deployment Simple App
        run: |
          cd ${{ steps.ctx.outputs.context }}
          helm install --wait --set image.name=${{ steps.ctx.outputs.tag }} ossca-test ./charts

      - name: Check Deployment Success
        run: |
          docker ps
          kubectl get pod --show-labels -o wide
          kubectl get svc -o wide
          curl -v localhost:30080/healthcheck

  argocd-test:
    name: ArgoCD Test
    env:
      ARGOCD_BCRYPT_PASSWORD: ${{ secrets.ARGOCD_BCRYPT_PASSWORD }}
      ARGOCD_PLAINTEXT_PASSWORD: ${{ secrets.ARGOCD_PLAINTEXT_PASSWORD }}
    needs: prepare
    if: needs.prepare.outputs.run_argo == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Prepare Context
        id: ctx
        run: |
          echo "context=${{ env.YEAR }}/argo-cd/${{ github.actor }}" >> $GITHUB_OUTPUT

      - name: Create Kind Cluster
        uses: helm/kind-action@v1.12.0
        with:
          cluster_name: argocd-e2e
          config: ./.github/00_init/config/kind.yaml

      - name: ArgoCD Install
        run: |
          echo "install argo-cd cli"
          ./.github/00_init/script/install-argocd-cli.sh

          helm repo add argo https://argoproj.github.io/argo-helm
          helm install --create-namespace -n argocd \
            argocd argo/argo-cd -f ./.github/00_init/config/argo-cd-values.yaml \
            --set configs.secret.argocdServerAdminPassword="$ARGOCD_BCRYPT_PASSWORD"

          argocd login localhost:30080 --username admin --password $ARGOCD_PLAINTEXT_PASSWORD --plaintext

      - name: Deployment ArgoCD Proj && Applcation
        run: |
          cd ${{ steps.ctx.outputs.context }}
          helm install --wait ossca-argo-cd-test ./

      - name: Check Project
        run: |
          echo "${{ secrets.ARGOCD_PROJECT_CHECKER }}" | base64 -d > validate-project.sh
          chmod +x validate-project.sh
          ./validate-project.sh

      - name: Check Application
        run: |
          echo "${{ secrets.ARGOCD_APPLICATION_CHECKER }}" | base64 -d > validate-application.sh
          chmod +x validate-application.sh
          ./validate-application.sh